import os
import sys
import json
import time
import shutil

# returns the path to the configuration JSON file
def get_config_path():
    appdata_dir = os.environ.get("APPDATA") # get %AppData% directory of current user
    app_folder = os.path.join(appdata_dir, "SmartScanner") # create subfolder

    os.makedirs(app_folder, exist_ok = True)

    return os.path.join(app_folder, "config.json") # return full path

CONFIG_PATH = get_config_path() # global constant for config path

# UNUSED FUNC
def getSource(parentFolder):
    source = parentFolder + input("Enter PDF name with extension (should be in testDocuments folder): ")

    # error handling
    if os.path.exists(source):
        print("File exists. Converting file...\n")
    else:
        print("File does not exist. Exiting program.\n")
        sys.exit(1)
    
    return source

# HELPER: function to construct different forms of a filename
def getFilename(source, index):
    filename = os.path.splitext(os.path.basename(source))[0]

    if index == 0:
        return filename
    elif index == 1:
        return f"{filename}.json"
    elif index == 2:
        return f"{filename}.md"

# UNUSED FUNC
def writeToMarkdown(text, filename):
    path = f"testDocuments/{filename}"
    with open(path, "w", encoding = "utf-8") as f:
        f.write(text)

    print(f"\nSaved Markdown to {path}") # success

# save inputted data to JSON file
def writeToJSON(data, filename):
    with open(filename, "w", encoding = "utf-8") as f:
        json.dump(data.model_dump(), f, ensure_ascii = False, indent = 4)
        
    print(f"\nSaved JSON to {filename}") 

# rename original file based on metadata generated by classification results
def renameFile(json_path, filepath):
    with open(json_path, 'r', encoding='utf-8') as f:
        json_data = json.load(f)
        
    classification = json_data.get("classification", {})
    author = classification.get("author", "UnknownAuthor")
    subject = classification.get("subject", "NoSubject")
    year = classification.get("year_processed", "UnknownYear")
    original_filename = os.path.basename(filepath)

    author_clean = sanitizeFilename(author) or "UnknownAuthor"
    subject_clean = sanitizeFilename(subject) or "NoSubject"
    year_clean = sanitizeFilename(year) or "UnknownYear"

    # construct new filename
    file_ext = os.path.splitext(filepath)[1]
    new_filename = f"{author_clean} - {subject_clean} - {year_clean}{file_ext}"

    return new_filename, classification, original_filename, author_clean, subject_clean, year_clean

# move scanned PDF file to corresponding classification folder
def moveDocument(filepath, new_filename, file_type, destination_root):
    type_folder = os.path.join(destination_root, file_type)
    os.makedirs(type_folder, exist_ok = True)

    time.sleep(1) # giving the program a quick rest

    destination_path = os.path.join(type_folder, f"[FOR REVIEW] {new_filename}")
    shutil.move(filepath, destination_path)
    print(f"Renamed file and moved file to destination: {destination_path}")
    return destination_path

# move JSON along with document
def moveJSON(json_path, author, subject, year, file_type, destination_root):
    json_filename = f"{author} - {subject} - {year}.json"
    dest_folder = os.path.join(destination_root, file_type)
    json_destination_path = os.path.join(dest_folder, json_filename)
    shutil.move(json_path, json_destination_path)
    print(f"JSON file created at: {json_destination_path}")

# return working directory
def getDefaultPath():
    return os.getcwd()  # Use current directory as default

# load data from the config file, if it does not exist then create it
def loadConfig():
    if not os.path.exists(CONFIG_PATH):
        saveConfig(getDefaultPath(), getDefaultPath())
    try:
        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError) as e:
        print(f"Error loading config: {e}")
        # Reset to defaults
        saveConfig(getDefaultPath(), getDefaultPath())
        return {"source": getDefaultPath(), "destination": getDefaultPath()}
    
def saveConfig(source, destination):
    config = {
        "source_path": source.replace("\\", "/"),
        "destination_path": destination.replace("\\", "/")
    }
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(config, f, indent = 4)

def saveSource(source_path):
    config = loadConfig()
    config["source_path"] = source_path
    with open(CONFIG_PATH, 'w') as f:
        json.dump(config, f, indent=4)

def saveDestination(destination_path):
    config = loadConfig()
    config["destination_path"] = destination_path
    with open(CONFIG_PATH, 'w') as f:
        json.dump(config, f, indent=4)

def sanitizeFilename(name):
    return "".join(c for c in name if c.isalnum() or c in " _-").rstrip()